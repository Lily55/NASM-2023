     1                                  %include "lib.asm"
     2                              <1>           section .text     ; ������� ����
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C6460620            <1> .l1      mov    byte[rsi+6],' '
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 090002000200050008-     MAS dw 9, 2, 2, 5, 8, 3, 5, -1
     4 00000009 0003000500FFFF     
     5 00000010 0A                      ExitMsg db "",10
     6                                  lenExit equ $-ExitMsg
     7                                  
     8                                  section .bss
     9 00000000 <res 10h>               NewUnicMAS resw 8
    10 00000010 <res 10h>               NewMAS resw 8
    11 00000020 <res Ah>                OutBuf resb 10
    12                                  
    13                                  section .text
    14                                  global _start
    15                                  
    16                                  _start:
    17                                  
    18 000000A9 BB00000000                  mov ebx, 0
    19 000000AE B908000000                  mov ecx, 8
    20 000000B3 BE00000000                  mov rsi, 0
    21 000000B8 BF00000000                  mov rdi, 0
    22                                  
    23                                  cycle1:         ; цикл прохода по массиву MAS в поиске уникальных элементов
    24 000000BD 51                          push rcx
    25 000000BE 66BA0000                    mov dx, 0
    26 000000C2 B908000000                  mov ecx, 8
    27 000000C7 66678B841B-                 mov ax, [ebx*2 + MAS]
    27 000000CC [00000000]         
    28 000000D0 53                          push rbx
    29 000000D1 BB00000000                  mov ebx, 0
    30                                  cycle2:         ; цикл в котором происходит сравнение
    31 000000D6 FFC3                        inc ebx     ; текущего элемента цикла1 со всеми
    32 000000D8 66673B841B-                 cmp ax, [ebx*2 + MAS] ; элементами массива MAS для выявления уникального элемента
    32 000000DD [00000000]         
    33 000000E1 7402                        je plus
    34 000000E3 EB03                        jmp next1
    35                                  plus:
    36 000000E5 66FFC2                      inc dx
    37                                  next1:
    38 000000E8 E2EC                        loop cycle2
    39                                  
    40 000000EA 6683FA02                    cmp dx, 2
    41 000000EE 7C04                        jl dobU
    42 000000F0 7D0F                        jge dobR
    43 000000F2 EB18                        jmp next2
    44                                  dobU:
    45 000000F4 66898436[00000000]          mov [rsi*2 + NewUnicMAS], ax
    46 000000FC 48FFC6                      inc rsi
    47 000000FF EB0B                        jmp next2
    48                                  dobR:
    49 00000101 6689843F[10000000]          mov [rdi*2 + NewMAS], ax
    50 00000109 48FFC7                      inc rdi
    51                                  next2:
    52 0000010C 5B                          pop rbx
    53 0000010D FFC3                        inc ebx
    54 0000010F 59                          pop rcx
    55 00000110 E2AB                        loop cycle1
    56                                  
    57 00000112 BB00000000                  mov ebx, 0
    58 00000117 B908000000                  mov ecx, 8
    59                                  cycle3:
    60 0000011C 66678B841B-                 mov ax, [ebx*2 + NewUnicMAS]
    60 00000121 [00000000]         
    61 00000125 FFC3                        inc ebx
    62 00000127 51                          push rcx
    63                                  
    64                                      ; конвертируем частное из целого в строку
    65 00000128 BE[20000000]                mov esi, OutBuf
    66 0000012D 98                          cwde
    67 0000012E E8CDFEFFFF                  call IntToStr64
    68                                  
    69                                      ; write
    70 00000133 89C2                        mov edx, eax
    71 00000135 B801000000                  mov eax, 1        
    72 0000013A BF01000000                  mov edi, 1        
    73 0000013F 0F05                        syscall 
    74                                  
    75 00000141 59                          pop rcx
    76 00000142 E2D8                        loop cycle3
    77                                  
    78                                  ;end:
    79                                      ; write ExitMsg
    80 00000144 B801000000                  mov     rax, 1        
    81 00000149 BF01000000                  mov     rdi, 1        
    82 0000014E 48BE-                       mov     rsi, ExitMsg  
    82 00000150 [1000000000000000] 
    83 00000158 BA01000000                  mov     rdx, lenExit  
    84 0000015D 0F05                        syscall  
    85                                  
    86 0000015F BB00000000                  mov ebx, 0
    87 00000164 B908000000                  mov ecx, 8
    88                                  cycle4:
    89 00000169 66678B841B-                 mov ax, [ebx*2 + NewMAS]
    89 0000016E [10000000]         
    90 00000172 FFC3                        inc ebx
    91 00000174 51                          push rcx
    92                                  
    93                                      ; конвертируем частное из целого в строку
    94 00000175 BE[20000000]                mov esi, OutBuf
    95 0000017A 98                          cwde
    96 0000017B E880FEFFFF                  call IntToStr64
    97                                  
    98                                      ; write
    99 00000180 89C2                        mov edx, eax
   100 00000182 B801000000                  mov eax, 1        
   101 00000187 BF01000000                  mov edi, 1        
   102 0000018C 0F05                        syscall 
   103                                  
   104 0000018E 59                          pop rcx
   105 0000018F E2D8                        loop cycle4  
   106                                  
   107                                      ; write ExitMsg
   108 00000191 B801000000                  mov     rax, 1        
   109 00000196 BF01000000                  mov     rdi, 1        
   110 0000019B 48BE-                       mov     rsi, ExitMsg  
   110 0000019D [1000000000000000] 
   111 000001A5 BA01000000                  mov     rdx, lenExit  
   112 000001AA 0F05                        syscall  
   113                                  
   114                                      ;exit
   115 000001AC B83C000000                  mov rax, 60
   116 000001B1 4831FF                      xor rdi, rdi
   117 000001B4 0F05                        syscall
