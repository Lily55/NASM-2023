     1                                  %include "lib.asm"
     2                              <1>           section .text     ; ������� ����
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C6460620            <1> .l1      mov    byte[rsi+6],' '
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                  ; MAS dw 3, 9, 2, 2, 5, 8, 1, 5, -1, 8, 10, 15, 9, 5, -1
     5 00000000 0A                      ExitMsg db "",10
     6                                  lenExit equ $-ExitMsg
     7 00000001 456E74657220746865-     EnterMsg db "Enter the array which is 25 or smaller numbers: ", 10
     7 0000000A 206172726179207768-
     7 00000013 696368206973203235-
     7 0000001C 206F7220736D616C6C-
     7 00000025 6572206E756D626572-
     7 0000002E 733A200A           
     8                                  lenEnter equ $-EnterMsg
     9                                  
    10 00000032 4F6E6C79206E756D62-     err_num db "Only numbers and spaces can be entered", 10
    10 0000003B 65727320616E642073-
    10 00000044 70616365732063616E-
    10 0000004D 20626520656E746572-
    10 00000056 65640A             
    11                                  err_num_len equ $-err_num
    12                                  
    13 00000059 4E6577206172726179-     ResultMsg db "New array is: ", 10
    13 00000062 2069733A200A       
    14                                  lenResult equ $-ResultMsg
    15                                  
    16 00000068 00<rep FFh>             input times 255 db 0
    17                                  len_input equ $-input
    18                                  
    19                                  section .bss
    20 00000000 <res 32h>               NewUnicMAS resw 25
    21 00000032 <res 32h>               NewMAS resw 25
    22 00000064 <res 32h>               OutBuf resb 50
    23 00000096 <res 32h>               MAS resw 25
    24                                  
    25                                  section .text
    26                                  global _start
    27                                  
    28                                  _start:
    29                                  
    30 000000A9 B801000000                  mov rax, 1
    31 000000AE BF01000000                  mov rdi, 1
    32 000000B3 48BE-                       mov rsi, EnterMsg
    32 000000B5 [0100000000000000] 
    33 000000BD BA31000000                  mov rdx, lenEnter
    34 000000C2 0F05                        syscall
    35                                  
    36 000000C4 B800000000                  mov rax, 0
    37 000000C9 BF00000000                  mov rdi, 0
    38 000000CE 48BE-                       mov rsi, input
    38 000000D0 [6800000000000000] 
    39 000000D8 BAFF000000                  mov rdx, len_input
    40 000000DD 0F05                        syscall
    41                                  
    42 000000DF 4889C1                      mov rcx, rax
    43 000000E2 4831D2                      xor rdx, rdx
    44 000000E5 4D31D2                      xor r10, r10
    45                                  
    46                                  process_line:
    47 000000E8 80BA[68000000]0A            cmp byte[input + rdx], 10
    48 000000EF 7417                        je process_number
    49                                  
    50 000000F1 80BA[68000000]20            cmp byte[input + rdx], ' '
    51 000000F8 7537                        jne next
    52                                  
    53 000000FA C682[68000000]0A            mov byte[input + rdx], 10
    54 00000101 4939D2                      cmp r10, rdx
    55 00000104 7502                        jne process_number
    56 00000106 EB29                        jmp next
    57                                  
    58                                  process_number:
    59 00000108 52                          push rdx
    60                                  
    61 00000109 E844FFFFFF                  call StrToInt64
    62 0000010E 4883FB00                    cmp rbx, 0
    63 00000112 0F8531010000                jne error_num
    64                                  
    65 00000118 4889843F[96000000]          mov [MAS + 2 * rdi], rax
    66 00000120 48FFC7                      inc rdi
    67                                  
    68 00000123 5A                          pop rdx
    69 00000124 4989D2                      mov r10, rdx
    70 00000127 49FFC2                      inc r10
    71 0000012A 498DB2[68000000]            lea rsi, [input + r10]
    72                                  
    73                                  next:
    74 00000131 48FFC2                      inc rdx
    75 00000134 E2B2                        loop process_line
    76                                  
    77                                  
    78                                  
    79                                  ;logic
    80                                  
    81 00000136 BB00000000                  mov ebx, 0
    82 0000013B 89F9                        mov ecx, edi
    83 0000013D 4989FA                      mov r10, rdi
    84 00000140 4831F6                      xor rsi, rsi ; Unic counter
    85 00000143 4831FF                      xor rdi, rdi ; Replicated counter
    86                                  
    87                                  cycle1:         ; цикл прохода по массиву MAS в поиске уникальных элементов
    88 00000146 51                          push rcx
    89 00000147 66BA0000                    mov dx, 0
    90 0000014B 4C89D1                      mov rcx, r10
    91 0000014E 66678B841B-                 mov ax, [ebx*2 + MAS]
    91 00000153 [96000000]         
    92 00000157 53                          push rbx
    93 00000158 BB00000000                  mov ebx, 0
    94                                  cycle2:         ; цикл в котором происходит сравнение
    95                                          ; текущего элемента цикла1 со всеми
    96 0000015D 66673B841B-                 cmp ax, [ebx*2 + MAS] ; элементами массива MAS для выявления уникального элемента
    96 00000162 [96000000]         
    97 00000166 7402                        je plus
    98 00000168 EB03                        jmp next1
    99                                  plus:
   100 0000016A 66FFC2                      inc dx      ; при нахождении повторения увеличиваем счётчик на 1
   101                                  next1:
   102 0000016D FFC3                        inc ebx 
   103 0000016F E2EC                        loop cycle2
   104                                  
   105 00000171 6683FA02                    cmp dx, 2   ; если счётчик равен 1, то это уникальный элемент
   106 00000175 7C04                        jl dobU
   107 00000177 7D0F                        jge dobR
   108 00000179 EB18                        jmp next2
   109                                  
   110                                  dobU:
   111 0000017B 66898436[00000000]          mov [rsi*2 + NewUnicMAS], ax    ; добавляем уникальные элементы в NewUnicMAS
   112 00000183 48FFC6                      inc rsi
   113 00000186 EB0B                        jmp next2
   114                                  
   115                                  dobR:
   116 00000188 6689843F[32000000]          mov [rdi*2 + NewMAS], ax    ; добавляем повторяющиеся элменеты в NewMAS
   117 00000190 48FFC7                      inc rdi
   118                                      
   119                                  next2:
   120 00000193 5B                          pop rbx
   121 00000194 FFC3                        inc ebx
   122 00000196 59                          pop rcx
   123 00000197 E2AD                        loop cycle1
   124                                  
   125 00000199 BB00000000                  mov ebx, 0
   126 0000019E 4889F1                      mov rcx, rsi
   127                                  new_array1:
   128 000001A1 66678B841B-                 mov ax, [ebx*2 + NewUnicMAS]    ; добавляем в массив сначала неповторяющиеся элементы
   128 000001A6 [00000000]         
   129 000001AA 666789841B-                 mov [ebx*2 + MAS], ax
   129 000001AF [96000000]         
   130 000001B3 FFC3                        inc ebx
   131 000001B5 E2EA                        loop new_array1
   132                                  
   133 000001B7 89DA                        mov edx, ebx
   134 000001B9 BB00000000                  mov ebx, 0
   135 000001BE 4889F9                      mov rcx, rdi
   136                                  new_array2:
   137 000001C1 66678B841B-                 mov ax, [ebx*2 + NewMAS]    ; потом добавляем в массив повторяющиеся элементы
   137 000001C6 [32000000]         
   138 000001CA 6667898412-                 mov [edx*2 + MAS], ax
   138 000001CF [96000000]         
   139 000001D3 FFC3                        inc ebx
   140 000001D5 FFC2                        inc edx
   141 000001D7 E2E8                        loop new_array2
   142                                  
   143                                  
   144                                      ; Result Message
   145 000001D9 B801000000                  mov rax, 1
   146 000001DE BF01000000                  mov rdi, 1
   147 000001E3 48BE-                       mov rsi, ResultMsg
   147 000001E5 [5900000000000000] 
   148 000001ED BA0F000000                  mov rdx, lenResult
   149 000001F2 0F05                        syscall
   150                                  
   151                                  
   152 000001F4 BB00000000                  mov ebx, 0
   153 000001F9 4C89D1                      mov rcx, r10
   154                                  output_cycle:
   155 000001FC 66678B841B-                 mov ax, [ebx*2 + MAS]
   155 00000201 [96000000]         
   156 00000205 FFC3                        inc ebx
   157 00000207 51                          push rcx
   158                                  
   159                                      ; конвертируем частное из целого в строку
   160 00000208 BE[64000000]                mov esi, OutBuf
   161 0000020D 98                          cwde
   162 0000020E E8EDFDFFFF                  call IntToStr64
   163                                  
   164                                      ; write
   165 00000213 89C2                        mov edx, eax
   166 00000215 B801000000                  mov eax, 1        
   167 0000021A BF01000000                  mov edi, 1        
   168 0000021F 0F05                        syscall 
   169                                  
   170 00000221 59                          pop rcx
   171 00000222 E2D8                        loop output_cycle  
   172                                  
   173                                      ; write ExitMsg
   174 00000224 B801000000                  mov     rax, 1        
   175 00000229 BF01000000                  mov     rdi, 1        
   176 0000022E 48BE-                       mov     rsi, ExitMsg  
   176 00000230 [0000000000000000] 
   177 00000238 BA01000000                  mov     rdx, lenExit  
   178 0000023D 0F05                        syscall  
   179                                  
   180                                  exit:    ;exit
   181 0000023F B83C000000                  mov rax, 60
   182 00000244 4831FF                      xor rdi, rdi
   183 00000247 0F05                        syscall
   184                                  
   185                                  error_num:
   186 00000249 B801000000                  mov rax, 1
   187 0000024E BF01000000                  mov rdi, 1   
   188 00000253 48BE-                       mov rsi, err_num
   188 00000255 [3200000000000000] 
   189 0000025D BA27000000                  mov rdx, err_num_len
   190 00000262 0F05                        syscall
   191 00000264 EBD9                        jmp exit
