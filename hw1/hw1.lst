     1                                  %include "lib.asm"
     2                              <1>           section .text     ; ������� ����
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C6460620            <1> .l1      mov    byte[rsi+6],' '
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  ; %define INPUT_LEN 33
     4                                  
     5                                      section .data
     6 00000000 456E74657220746865-         EnterMsg db "Enter the string 32 letters long or smaller: ", 10
     6 00000009 20737472696E672033-
     6 00000012 32206C657474657273-
     6 0000001B 206C6F6E67206F7220-
     6 00000024 736D616C6C65723A20-
     6 0000002D 0A                 
     7                                      lenEnter equ $-EnterMsg
     8 0000002E 576F726473206E756D-         WordsNumber db "Words number is: "
     8 00000037 6265722069733A20   
     9                                      lenWordsNumber equ $-WordsNumber
    10 0000003F 21                          INPUT_LEN db 33
    11 00000040 4C657474657273206E-         LettersNumber db "Letters numbers are: "
    11 00000049 756D62657273206172-
    11 00000052 653A20             
    12                                      lenLettersNumber equ $-LettersNumber
    13 00000055 0A                          ExitMsg db "",10
    14                                      lenExit equ $-ExitMsg
    15                                      ; input db "qwerty dfgh vbnmfcser ah kljwert"
    16                                  
    17                                      section .bss
    18 00000000 <res 20h>                   LetterCount resb 32
    19 00000020 <res 20h>                   OutBuf resb 32
    20 00000040 <res 21h>                   input resb 33
    21                                  
    22                                      section .text
    23                                      global _start
    24                                  
    25                                  _start:
    26                                  
    27                                      ; write EnterMsg
    28 000000A9 B801000000                  mov     rax, 1        
    29 000000AE BF01000000                  mov     rdi, 1        
    30 000000B3 48BE-                       mov     rsi, EnterMsg  
    30 000000B5 [0000000000000000] 
    31 000000BD BA2E000000                  mov     rdx, lenEnter  
    32 000000C2 0F05                        syscall 
    33                                  
    34 000000C4 B800000000                  mov rax, 0
    35 000000C9 BF00000000                  mov rdi, 0
    36 000000CE 48BE-                       mov rsi, input
    36 000000D0 [4000000000000000] 
    37 000000D8 48BA-                       mov rdx, INPUT_LEN
    37 000000DA [3F00000000000000] 
    38 000000E2 0F05                        syscall
    39                                  
    40 000000E4 4889C1                      mov rcx, rax
    41 000000E7 BB00000000                  mov ebx, 0
    42 000000EC 4831D2                      xor rdx, rdx ; letter counter
    43 000000EF 4831C0                      xor rax, rax ; words counter
    44 000000F2 48FFCE                      dec rsi
    45                                     
    46                                  
    47                                  main_cycle:
    48 000000F5 48FFC6                      inc rsi
    49 000000F8 48FFC2                      inc rdx
    50                                  
    51 000000FB 803E20                      cmp byte[rsi], ' '
    52 000000FE 7407                        je countW
    53                                  
    54 00000100 803E0A                      cmp byte[rsi], 10
    55 00000103 7402                        je countW
    56 00000105 EB15                        jmp next
    57                                  
    58                                  countW:
    59 00000107 48FFCA                      dec rdx
    60 0000010A 48FFC0                      inc rax
    61 0000010D 67488993[00000000]          mov [ebx + LetterCount], rdx
    62 00000115 4831D2                      xor rdx, rdx
    63 00000118 FFC3                        inc ebx
    64 0000011A EB00                        jmp next
    65                                  
    66                                  next:
    67 0000011C E2D7                        loop main_cycle
    68                                  
    69 0000011E 50                          push rax
    70                                  
    71                                      ; выводим сообщение о количестве слов
    72 0000011F B801000000                  mov rax, 1
    73 00000124 BF01000000                  mov rdi, 1
    74 00000129 48BE-                       mov rsi, WordsNumber
    74 0000012B [2E00000000000000] 
    75 00000133 BA11000000                  mov rdx, lenWordsNumber
    76 00000138 0F05                        syscall
    77                                  
    78 0000013A 58                          pop rax
    79 0000013B 50                          push rax
    80                                  
    81                                      ; конвертируем частное из целого в строку
    82 0000013C BE[20000000]                mov esi, OutBuf
    83 00000141 6699                        cwd
    84 00000143 E8B8FEFFFF                  call IntToStr64
    85                                  
    86                                      ; write
    87 00000148 89C2                        mov edx, eax
    88 0000014A B801000000                  mov eax, 1        
    89 0000014F BF01000000                  mov edi, 1        
    90 00000154 0F05                        syscall 
    91                                  
    92                                      ; write ExitMsg
    93 00000156 B801000000                  mov     rax, 1        
    94 0000015B BF01000000                  mov     rdi, 1        
    95 00000160 48BE-                       mov     rsi, ExitMsg  
    95 00000162 [5500000000000000] 
    96 0000016A BA01000000                  mov     rdx, lenExit  
    97 0000016F 0F05                        syscall
    98                                  
    99 00000171 58                          pop rax
   100 00000172 50                          push rax
   101                                  
   102                                      ; выводим сообщение о количестве букв в словах
   103 00000173 B801000000                  mov rax, 1
   104 00000178 BF01000000                  mov rdi, 1
   105 0000017D 48BE-                       mov rsi, LettersNumber
   105 0000017F [4000000000000000] 
   106 00000187 BA15000000                  mov rdx, lenLettersNumber
   107 0000018C 0F05                        syscall
   108                                  
   109 0000018E 58                          pop rax
   110 0000018F 50                          push rax
   111                                  
   112 00000190 BB00000000                  mov ebx, 0
   113 00000195 89C1                        mov ecx, eax
   114                                  OutputCycle:
   115 00000197 678B83[00000000]            mov eax, [ebx + LetterCount]
   116 0000019E FFC3                        inc ebx
   117 000001A0 51                          push rcx
   118                                  
   119                                      ; конвертируем частное из целого в строку
   120 000001A1 BE[20000000]                mov esi, OutBuf
   121 000001A6 6698                        cbw
   122 000001A8 E853FEFFFF                  call IntToStr64
   123                                  
   124                                      ; write
   125 000001AD 89C2                        mov edx, eax
   126 000001AF B801000000                  mov eax, 1        
   127 000001B4 BF01000000                  mov edi, 1        
   128 000001B9 0F05                        syscall 
   129                                  
   130 000001BB 59                          pop rcx
   131 000001BC E2D9                        loop OutputCycle  
   132                                    
   133                                  
   134                                      ; write ExitMsg
   135 000001BE B801000000                  mov     rax, 1        
   136 000001C3 BF01000000                  mov     rdi, 1        
   137 000001C8 48BE-                       mov     rsi, ExitMsg  
   137 000001CA [5500000000000000] 
   138 000001D2 BA01000000                  mov     rdx, lenExit  
   139 000001D7 0F05                        syscall  
   140                                  
   141                                      ;exit
   142 000001D9 B83C000000                  mov rax, 60
   143 000001DE 4831FF                      xor rdi, rdi
   144 000001E1 0F05                        syscall
