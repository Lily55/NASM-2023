     1                                  %include "../lib.asm"
     2                              <1>           section .text     ; ������� ����
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                      section .data
     4 00000000 507265737320456E74-         ExitMsg db "Press Enter to Exit",10
     4 00000009 657220746F20457869-
     4 00000012 740A               
     5                                      lenExit equ $-ExitMsg
     6 00000014 456E74657220746865-         EnterAMsg db "Enter the A which isn't 0: "
     6 0000001D 204120776869636820-
     6 00000026 69736E277420303A20 
     7                                      lenEnterA equ $-EnterAMsg
     8 0000002F 456E74657220746865-         EnterBMsg db "Enter the B which isn't 0: "
     8 00000038 204220776869636820-
     8 00000041 69736E277420303A20 
     9                                      lenEnterB equ $-EnterBMsg
    10 0000004A 54686520726573756C-         ResMsg db "The result is: "
    10 00000053 742069733A20       
    11                                      lenRes equ $-ResMsg
    12                                  
    13                                      section .bss
    14 00000000 ????????                        A resd 1
    15 00000004 ????????                        B resd 1
    16 00000008 <res Ah>                        OutBuf resb 10
    17 00000012 <res Ah>                        InBuf   resb    10
    18                                          lenIn   equ     $-InBuf 
    19                                  
    20                                      section .text
    21                                          global _start
    22                                  
    23                                  _start:
    24                                  
    25                                  rightA:
    26                                      ; write EnterAMsg
    27 000000A9 B801000000                  mov     rax, 1        
    28 000000AE BF01000000                  mov     rdi, 1        
    29 000000B3 48BE-                       mov     rsi, EnterAMsg  
    29 000000B5 [1400000000000000] 
    30 000000BD BA1B000000                  mov     rdx, lenEnterA  
    31 000000C2 0F05                        syscall  
    32                                  
    33                                      ; read A
    34 000000C4 B800000000                  mov     rax, 0        
    35 000000C9 BF00000000                  mov     rdi, 0        
    36 000000CE 48BE-                       mov     rsi, InBuf    
    36 000000D0 [1200000000000000] 
    37 000000D8 BA0A000000                  mov     rdx, lenIn    
    38 000000DD 0F05                        syscall  
    39                                  
    40 000000DF BE[12000000]                mov esi, InBuf
    41 000000E4 E869FFFFFF                  call StrToInt64
    42 000000E9 83FB00                      cmp ebx, 0
    43                                  
    44                                      ; проверка неравенства А нулю
    45 000000EC 83F800                      cmp eax, 0
    46 000000EF 74B8                        je rightA
    47 000000F1 890425[00000000]            mov [A], eax
    48                                  
    49                                  rightB:    
    50                                      ; write EnterBMsg
    51 000000F8 B801000000                  mov     rax, 1        
    52 000000FD BF01000000                  mov     rdi, 1        
    53 00000102 48BE-                       mov     rsi, EnterBMsg  
    53 00000104 [2F00000000000000] 
    54 0000010C BA1B000000                  mov     rdx, lenEnterB  
    55 00000111 0F05                        syscall 
    56                                  
    57                                      ; read B
    58 00000113 B800000000                  mov     rax, 0      
    59 00000118 BF00000000                  mov     rdi, 0        
    60 0000011D 48BE-                       mov     rsi, InBuf    
    60 0000011F [1200000000000000] 
    61 00000127 BA0A000000                  mov     rdx, lenIn    
    62 0000012C 0F05                        syscall  
    63                                  
    64 0000012E BE[12000000]                mov esi, InBuf
    65 00000133 E81AFFFFFF                  call StrToInt64
    66 00000138 83FB00                      cmp ebx, 0
    67                                  
    68                                      ; проверка неравенства B нулю
    69 0000013B 83F800                      cmp eax, 0
    70 0000013E 74B8                        je rightB
    71 00000140 890425[04000000]            mov [B], eax
    72                                  
    73 00000147 668B0425[00000000]          mov ax, [A]
    74 0000014F 668B1C25[04000000]          mov bx, [B]
    75 00000157 66F7EB                      imul bx
    76                                  
    77                                      ; начало программы
    78 0000015A 6683F800                    cmp ax, 0
    79 0000015E 7E28                        jle less
    80 00000160 668B0425[00000000]          mov ax, [A]
    81 00000168 668B1C25[04000000]          mov bx, [B]
    82 00000170 6629D8                      sub ax, bx
    83 00000173 6689C1                      mov cx, ax
    84 00000176 668B0425[00000000]          mov ax, [A]
    85 0000017E 6601D8                      add ax, bx
    86 00000181 6699                        cwd
    87 00000183 66F7F9                      idiv cx
    88 00000186 EB0B                        jmp com
    89                                  
    90                                  less:
    91 00000188 89C3                        mov ebx, eax
    92 0000018A 66B888FF                    mov ax, -120
    93 0000018E 6699                        cwd
    94 00000190 66F7FB                      idiv bx
    95                                  
    96                                  com:
    97                                  
    98 00000193 89C3                        mov ebx, eax ; переносим данные из EAX в EBX
    99                                  
   100                                      ; write ResMsg
   101 00000195 B801000000                  mov     rax, 1        
   102 0000019A BF01000000                  mov     rdi, 1        
   103 0000019F 48BE-                       mov     rsi, ResMsg  
   103 000001A1 [4A00000000000000] 
   104 000001A9 BA0F000000                  mov     rdx, lenRes  
   105 000001AE 0F05                        syscall 
   106                                  
   107 000001B0 89D8                        mov eax, ebx ; переносим число обратно в EAX
   108                                  
   109                                      ; конвертируем частное из целого в строку
   110 000001B2 BE[08000000]                mov esi, OutBuf
   111 000001B7 98                          cwde
   112 000001B8 E843FEFFFF                  call IntToStr64
   113                                  
   114                                      ; write
   115 000001BD 89C2                        mov edx, eax
   116 000001BF B801000000                  mov eax, 1        
   117 000001C4 BF01000000                  mov edi, 1        
   118 000001C9 0F05                        syscall 
   119                                      
   120                                  
   121                                      ; write ExitMsg
   122 000001CB B801000000                  mov     rax, 1        
   123 000001D0 BF01000000                  mov     rdi, 1        
   124 000001D5 48BE-                       mov     rsi, ExitMsg  
   124 000001D7 [0000000000000000] 
   125 000001DF BA14000000                  mov     rdx, lenExit  
   126 000001E4 0F05                        syscall  
   127                                  
   128                                      ; read Enter
   129 000001E6 B800000000                  mov     rax, 0        
   130 000001EB BF00000000                  mov     rdi, 0        
   131 000001F0 48BE-                       mov     rsi, InBuf    
   131 000001F2 [1200000000000000] 
   132 000001FA BA0A000000                  mov     rdx, lenIn    
   133 000001FF 0F05                        syscall  
   134                                  
   135                                      ;exit
   136 00000201 B83C000000                  mov rax, 60
   137 00000206 4831FF                      xor rdi, rdi
   138 00000209 0F05                        syscall
