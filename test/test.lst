     1                                  %include "lib.asm"
     2                              <1>           section .text     ; ������� ����
     3                              <1> IntToStr64:
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C6460620            <1> .l1      mov    byte[rsi+6],' '
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 200A                    ExitMsg db " ", 10
     5                                  lenExit equ $-ExitMsg
     6                                  
     7 00000002 0100020003000400FB-     A   dw  1, 2, 3, 4, -5          ; пришлось исправить тип на word из-за того, что IntToStr64 не хотела нормально преобразовывать числа и выдавала ошибку
     7 0000000B FF                 
     8 0000000C 0600F9FF080009000A-         dw  6, -7, 8, 9, 10
     8 00000015 00                 
     9 00000016 0B000C00F3FF0E000F-         dw  11, 12, -13, 14, 15
     9 0000001F 00                 
    10 00000020 100008001200130014-         dw  16, 8, 18, 19, 20
    10 00000029 00                 
    11 0000002A F6FF0F000D000B0007-         dw  -10, 15, 13, 11, 7      ; если писать -1, то произведение считается нормально, если пишем -10, происходит
    11 00000033 00                 
    12                                  
    13                                  section .bss
    14 00000000 ??                      S resb 1
    15 00000001 <res 32h>               Output resb 50
    16                                  
    17                                  section .text
    18                                  global _start
    19                                  
    20                                  _start:
    21 000000A9 66B90500                    mov cx, 5
    22 000000AD BE08000000                  mov esi, 8
    23 000000B2 B801000000                  mov rax, 1     ; чтобы у нас в rax произведение не было равно нулю, изначально в rax нужно что-то положить
    24                                  
    25                                  cycle:
    26 000000B7 6631DB                      xor bx, bx
    27 000000BA 66678B9E[02000000]          mov bx, [A + esi]
    28 000000C2 6683FB00                    cmp bx, 0
    29 000000C6 7C02                        jl umnog
    30 000000C8 EB03                        jmp next
    31                                  
    32                                  umnog:
    33 000000CA 66F7EB                      imul bx
    34                                  
    35                                  next:
    36 000000CD 83C608                      add esi, 8
    37 000000D0 E2E5                        loop cycle
    38                                  
    39                                  
    40 000000D2 66890425[18000000]          mov [A + 22], ax
    41                                  
    42 000000DA B905000000                  mov ecx, 5
    43 000000DF BB00000000                  mov ebx, 0
    44                                  
    45                                  cycle1:
    46 000000E4 51                          push rcx
    47 000000E5 B905000000                  mov ecx, 5
    48                                  cycle2:
    49 000000EA 51                          push rcx
    50 000000EB 67488B841B-                 mov rax, [A + 2*ebx]
    50 000000F0 [02000000]         
    51                                  
    52                                  
    53 000000F4 BE[01000000]                mov esi, Output ; исправила rdi на esi
    54 000000F9 98                          cwde
    55 000000FA E801FFFFFF                  call IntToStr64
    56                                  
    57 000000FF 4889C2                      mov rdx, rax
    58 00000102 B801000000                  mov rax, 1
    59 00000107 BF01000000                  mov rdi, 1
    60 0000010C 0F05                        syscall
    61                                  
    62 0000010E 59                          pop rcx
    63                                  
    64 0000010F FFC3                        inc ebx
    65 00000111 E2D7                        loop cycle2
    66                                  
    67 00000113 B801000000                  mov rax, 1
    68 00000118 BF01000000                  mov rdi, 1
    69 0000011D 48BE-                       mov rsi, ExitMsg
    69 0000011F [0000000000000000] 
    70 00000127 BA02000000                  mov rdx, lenExit
    71 0000012C 0F05                        syscall
    72                                  
    73 0000012E 59                          pop rcx
    74                                  
    75 0000012F E2B3                        loop cycle1
    76                                  
    77 00000131 B83C000000                  mov rax, 60
    78 00000136 4831FF                      xor rdi, rdi
    79 00000139 0F05                        syscall 
